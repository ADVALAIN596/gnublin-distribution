- 0001-gnublin.patch -

In diesem Patch sind alle Aenderungen, um den Kernel
git://git.lpclinux.com/linux-2.6.33-lpc313x
in der Version

	commit 093e9d2f7f730dee86d6734f7a66fc573bcd7027
	Author: Bangaragiri G <bangaragiri.g@nxp.com>
	Date:   Tue Sep 13 17:23:57 2011 +0000

mit gpiolib/sysfs auszustatten. Einige Teile kommen
aus den Patches von Ingo Albrecht auf lpclinux.com.

H. Hoegl, <Hubert.Hoegl@hs-augsburg.de>, 2011-12-12 

diff --git a/arch/arm/Kconfig b/arch/arm/Kconfig
index 11f7fd7..3d98618 100644
--- a/arch/arm/Kconfig
+++ b/arch/arm/Kconfig
@@ -731,6 +731,11 @@ config ARCH_U8500
 config ARCH_LPC313X
 	bool "NXP LPC313X series"
 	select CPU_ARM926T
+#	select GENERIC_TIME
+#	select GENERIC_CLOCKEVENTS
+	select GENERIC_GPIO
+  select ARCH_WANT_OPTIONAL_GPIOLIB
+#	select ARCH_REQUIRE_GPIOLIB
 	help
 	  Say Y here for systems based on one of the NXP LPC313x & LPC315x
 	  System on a Chip processors.  These CPUs include an ARM926EJS
diff --git a/arch/arm/mach-lpc313x/Makefile b/arch/arm/mach-lpc313x/Makefile
index f64403a..d71d725 100644
--- a/arch/arm/mach-lpc313x/Makefile
+++ b/arch/arm/mach-lpc313x/Makefile
@@ -4,12 +4,14 @@
 
 # Object file lists.
 
-obj-y			+= irq.o time.o cgu.o generic.o i2c.o gpio.o dma.o usb.o wdt.o
+# obj-y			+= irq.o time.o cgu.o generic.o i2c.o gpio.o dma.o usb.o wdt.o
+obj-y			+= irq.o time.o cgu.o generic.o i2c.o dma.o usb.o wdt.o
 
 
 # Specific board support
 obj-$(CONFIG_MACH_VAL3153) += val3153.o leds.o
-obj-$(CONFIG_MACH_EA313X) += ea313x.o leds-pca9532.o
+# obj-$(CONFIG_MACH_EA313X) += ea313x.o leds-pca9532.o 
+obj-$(CONFIG_MACH_EA313X) += ea313x.o leds-pca9532.o gpiolib.o
 obj-$(CONFIG_MACH_EA3152) += ea313x.o leds-pca9532.o
 obj-$(CONFIG_MACH_VAL3154) += val3154.o leds.o
 obj-$(CONFIG_LPC3152_AD) += psu.o
diff --git a/arch/arm/mach-lpc313x/ea313x.c b/arch/arm/mach-lpc313x/ea313x.c
index df1a300..7efc6ac 100644
--- a/arch/arm/mach-lpc313x/ea313x.c
+++ b/arch/arm/mach-lpc313x/ea313x.c
@@ -41,7 +41,7 @@
 #include <asm/mach-types.h>
 
 #include <asm/mach/arch.h>
-#include <mach/gpio.h>
+#include <mach/gpio-orig.h>
 #include <mach/i2c.h>
 #include <mach/board.h>
 
@@ -51,7 +51,8 @@ static struct lpc313x_mci_irq_data irq_data = {
 
 static int mci_get_cd(u32 slot_id)
 {
-	return gpio_get_value(GPIO_MI2STX_BCK0);
+	// --hh return gpio_get_value(GPIO_MI2STX_BCK0);
+	return gpio_get_value(GPIO_MNAND_RYBN2);
 }
 
 static irqreturn_t ea313x_mci_detect_interrupt(int irq, void *data)
@@ -73,9 +74,12 @@ static int mci_init(u32 slot_id, irq_handler_t irqhdlr, void *data)
 	int level;
 
 	/* enable power to the slot */
-	gpio_set_value(GPIO_MI2STX_DATA0, 0);
+	lpc313x_gpio_set_value(GPIO_MI2STX_DATA0, 0);
+	//gpio_set_value(GPIO_MI2STX_DATA0, 0);
 	/* set cd pins as GPIO pins */
-	gpio_direction_input(GPIO_MI2STX_BCK0);
+	// --hh gpio_direction_input(GPIO_MI2STX_BCK0);
+	lpc313x_gpio_direction_input(GPIO_MNAND_RYBN2);
+	//gpio_direction_input(GPIO_MNAND_RYBN2);
 
 	/* select the opposite level senstivity */
 	level = mci_get_cd(0)?IRQ_TYPE_LEVEL_LOW:IRQ_TYPE_LEVEL_HIGH;
@@ -356,7 +360,8 @@ static void spi_set_cs_state(int cs_num, int state)
 	(void) cs_num;
 
 	/* Set GPO state for CS0 */
-	lpc313x_gpio_set_value(GPIO_SPI_CS_OUT0, state);
+	/* lpc313x_gpio_set_value(GPIO_SPI_CS_OUT0, state);  */
+	gpio_set_value(GPIO_SPI_CS_OUT0, state); 
 }
 
 struct lpc313x_spics_cfg lpc313x_stdspics_cfg[] =
diff --git a/arch/arm/mach-lpc313x/generic.c b/arch/arm/mach-lpc313x/generic.c
index dc7d79c..352db1a 100644
--- a/arch/arm/mach-lpc313x/generic.c
+++ b/arch/arm/mach-lpc313x/generic.c
@@ -217,6 +217,7 @@ int __init lpc313x_init(void)
 	/* AUDIO CODEC CLOCK (256FS) */
 	GPIO_DRV_IP(IOCONF_I2STX_1, 0x8);
 
+  lpc313x_gpiolib_init();
 	return platform_add_devices(devices, ARRAY_SIZE(devices));
 }
 
diff --git a/arch/arm/mach-lpc313x/gpio.c b/arch/arm/mach-lpc313x/gpio.c
index 6decaa0..d156f52 100644
--- a/arch/arm/mach-lpc313x/gpio.c
+++ b/arch/arm/mach-lpc313x/gpio.c
@@ -28,7 +28,7 @@
 
 #include <asm/errno.h>
 #include <mach/hardware.h>
-#include <mach/gpio.h>
+#include <mach/gpio-orig.h>
 
 
 void lpx313x_gpio_func_mode(int gpio)
diff --git a/arch/arm/mach-lpc313x/include/mach/gpio.h b/arch/arm/mach-lpc313x/include/mach/gpio.h
index 97381d1..1fa3796 100644
--- a/arch/arm/mach-lpc313x/include/mach/gpio.h
+++ b/arch/arm/mach-lpc313x/include/mach/gpio.h
@@ -1,4 +1,7 @@
 /* linux/arch/arm/mach-lpc313x/include/mach/gpio.h
+ * 
+ * changes by Ingo Albrecht, see his patches at lpclinux.com
+ * 0007-lpc313x-gpiolib-support.patch
  *  
  *  Author:	Durgesh Pattamatta
  *  Copyright (C) 2009 NXP semiconductors
@@ -21,221 +24,214 @@
  *
  */
 #ifndef _LPC313X_GPIO_H
+#define _LPC313X_GPIO_H    /* added 2011-12-11, --hh */
 
-#include <mach/hardware.h>
-
-#define GPIO_PORT_MASK  0x0FE0
-#define GPIO_PIN_MASK   0x001F
-
-
-#define GPIO_MGPIO9           (IOCONF_EBI_MCI | 0)  
-#define GPIO_MGPIO6           (IOCONF_EBI_MCI | 1)  
-#define GPIO_MLCD_DB_7        (IOCONF_EBI_MCI | 2)  
-#define GPIO_MLCD_DB_4        (IOCONF_EBI_MCI | 3)  
-#define GPIO_MLCD_DB_2        (IOCONF_EBI_MCI | 4)  
-#define GPIO_MNAND_RYBN0      (IOCONF_EBI_MCI | 5)  
-#define GPIO_MI2STX_CLK0      (IOCONF_EBI_MCI | 6)  
-#define GPIO_MI2STX_BCK0      (IOCONF_EBI_MCI | 7)  
-#define GPIO_EBI_A_1_CLE      (IOCONF_EBI_MCI | 8)  
-#define GPIO_EBI_NCAS_BLOUT   (IOCONF_EBI_MCI | 9)  
-#define GPIO_MLCD_DB_0        (IOCONF_EBI_MCI | 10) 
-#define GPIO_EBI_DQM_0_NOE    (IOCONF_EBI_MCI | 11) 
-#define GPIO_MLCD_CSB         (IOCONF_EBI_MCI | 12) 
-#define GPIO_MLCD_DB_1        (IOCONF_EBI_MCI | 13) 
-#define GPIO_MLCD_E_RD        (IOCONF_EBI_MCI | 14) 
-#define GPIO_MLCD_RS          (IOCONF_EBI_MCI | 15) 
-#define GPIO_MLCD_RW_WR       (IOCONF_EBI_MCI | 16) 
-#define GPIO_MLCD_DB_3        (IOCONF_EBI_MCI | 17) 
-#define GPIO_MLCD_DB_5        (IOCONF_EBI_MCI | 18) 
-#define GPIO_MLCD_DB_6        (IOCONF_EBI_MCI | 19) 
-#define GPIO_MLCD_DB_8        (IOCONF_EBI_MCI | 20) 
-#define GPIO_MLCD_DB_9        (IOCONF_EBI_MCI | 21) 
-#define GPIO_MLCD_DB_10       (IOCONF_EBI_MCI | 22) 
-#define GPIO_MLCD_DB_11       (IOCONF_EBI_MCI | 23) 
-#define GPIO_MLCD_DB_12       (IOCONF_EBI_MCI | 24) 
-#define GPIO_MLCD_DB_13       (IOCONF_EBI_MCI | 25) 
-#define GPIO_MLCD_DB_14       (IOCONF_EBI_MCI | 26) 
-#define GPIO_MLCD_DB_15       (IOCONF_EBI_MCI | 27) 
-#define GPIO_MGPIO5           (IOCONF_EBI_MCI | 28) 
-#define GPIO_MGPIO7           (IOCONF_EBI_MCI | 29) 
-#define GPIO_MGPIO8           (IOCONF_EBI_MCI | 30) 
-#define GPIO_MGPIO10          (IOCONF_EBI_MCI | 31) 
-                
-#define GPIO_MNAND_RYBN1      (IOCONF_EBI_I2STX_0 | 0) 
-#define GPIO_MNAND_RYBN2      (IOCONF_EBI_I2STX_0 | 1) 
-#define GPIO_MNAND_RYBN3      (IOCONF_EBI_I2STX_0 | 2) 
-#define GPIO_MUART_CTS_N      (IOCONF_EBI_I2STX_0 | 3) 
-#define GPIO_MUART_RTS_N      (IOCONF_EBI_I2STX_0 | 4) 
-#define GPIO_MI2STX_DATA0     (IOCONF_EBI_I2STX_0 | 5) 
-#define GPIO_MI2STX_WS0       (IOCONF_EBI_I2STX_0 | 6) 
-#define GPIO_EBI_NRAS_BLOUT   (IOCONF_EBI_I2STX_0 | 7) 
-#define GPIO_EBI_A_0_ALE      (IOCONF_EBI_I2STX_0 | 8) 
-#define GPIO_EBI_NWE          (IOCONF_EBI_I2STX_0 | 9) 
-                 
-#define GPIO_CGU_SYSCLK_O     (IOCONF_CGU | 0) 
-
-#define GPIO_I2SRX_BCK0       (IOCONF_I2SRX_0 | 0) 
-#define GPIO_I2SRX_DATA0      (IOCONF_I2SRX_0 | 1) 
-#define GPIO_I2SRX_WS0        (IOCONF_I2SRX_0 | 2) 
-                  
-#define GPIO_I2SRX_DATA1      (IOCONF_I2SRX_1 | 0) 
-#define GPIO_I2SRX_BCK1       (IOCONF_I2SRX_1 | 1) 
-#define GPIO_I2SRX_WS1        (IOCONF_I2SRX_1 | 2) 
-                  
-#define GPIO_I2STX_DATA1      (IOCONF_I2STX_1 | 0) 
-#define GPIO_I2STX_BCK1       (IOCONF_I2STX_1 | 1) 
-#define GPIO_I2STX_WS1        (IOCONF_I2STX_1 | 2) 
-#define GPIO_I2STX_256FS_O    (IOCONF_I2STX_1 | 3) 
- 
-#define GPIO_EBI_D_9          (IOCONF_EBI | 0)  
-#define GPIO_EBI_D_10         (IOCONF_EBI | 1)  
-#define GPIO_EBI_D_11         (IOCONF_EBI | 2)  
-#define GPIO_EBI_D_12         (IOCONF_EBI | 3)  
-#define GPIO_EBI_D_13         (IOCONF_EBI | 4)  
-#define GPIO_EBI_D_14         (IOCONF_EBI | 5)  
-#define GPIO_EBI_D_4          (IOCONF_EBI | 6)  
-#define GPIO_EBI_D_0          (IOCONF_EBI | 7)  
-#define GPIO_EBI_D_1          (IOCONF_EBI | 8)  
-#define GPIO_EBI_D_2          (IOCONF_EBI | 9)  
-#define GPIO_EBI_D_3          (IOCONF_EBI | 10) 
-#define GPIO_EBI_D_5          (IOCONF_EBI | 11) 
-#define GPIO_EBI_D_6          (IOCONF_EBI | 12) 
-#define GPIO_EBI_D_7          (IOCONF_EBI | 13) 
-#define GPIO_EBI_D_8          (IOCONF_EBI | 14) 
-#define GPIO_EBI_D_15         (IOCONF_EBI | 15) 
-                  
-
-#define GPIO_GPIO1            (IOCONF_GPIO | 0)  
-#define GPIO_GPIO0            (IOCONF_GPIO | 1)  
-#define GPIO_GPIO2            (IOCONF_GPIO | 2)  
-#define GPIO_GPIO3            (IOCONF_GPIO | 3)  
-#define GPIO_GPIO4            (IOCONF_GPIO | 4)  
-#define GPIO_GPIO11           (IOCONF_GPIO | 5)  
-#define GPIO_GPIO12           (IOCONF_GPIO | 6)  
-#define GPIO_GPIO13           (IOCONF_GPIO | 7)  
-#define GPIO_GPIO14           (IOCONF_GPIO | 8)  
-#define GPIO_GPIO15           (IOCONF_GPIO | 9)  
-#define GPIO_GPIO16           (IOCONF_GPIO | 10) 
-#define GPIO_GPIO17           (IOCONF_GPIO | 11) 
-#define GPIO_GPIO18           (IOCONF_GPIO | 12) 
-#define GPIO_GPIO19           (IOCONF_GPIO | 13) 
-#define GPIO_GPIO20           (IOCONF_GPIO | 14) 
-                
-#define GPIO_I2C_SDA1         (IOCONF_I2C1 | 0) 
-#define GPIO_I2C_SCL1         (IOCONF_I2C1 | 1) 
-                          
-#define GPIO_SPI_MISO         (IOCONF_SPI | 0) 
-#define GPIO_SPI_MOSI         (IOCONF_SPI | 1) 
-#define GPIO_SPI_CS_IN        (IOCONF_SPI | 2) 
-#define GPIO_SPI_SCK          (IOCONF_SPI | 3) 
-#define GPIO_SPI_CS_OUT0      (IOCONF_SPI | 4) 
-                 
-#define GPIO_NAND_NCS_3       (IOCONF_NAND_CTRL | 0)
-#define GPIO_NAND_NCS_0       (IOCONF_NAND_CTRL | 1)
-#define GPIO_NAND_NCS_1       (IOCONF_NAND_CTRL | 2)
-#define GPIO_NAND_NCS_2       (IOCONF_NAND_CTRL | 3)
-                 
-#define GPIO_PWM_DATA         (IOCONF_PWM | 0)
-                  
-#define GPIO_UART_RXD         (IOCONF_UART | 0)
-#define GPIO_UART_TXD         (IOCONF_UART | 1)
-                
-                
-                
-static inline int lpc313x_gpio_direction_input(unsigned gpio)
-{
-	unsigned long flags;
-	int port = (gpio & GPIO_PORT_MASK);
-	int pin = 1 << (gpio & GPIO_PIN_MASK);
-
-	raw_local_irq_save(flags);
-
-	GPIO_M1_RESET(port) = pin; 
-	GPIO_M0_RESET(port) = pin;
-
-	raw_local_irq_restore(flags);
-	return 0;
-}
-
-static inline int lpc313x_gpio_ip_driven(unsigned gpio)
-{
-	unsigned long flags;
-	int port = (gpio & GPIO_PORT_MASK);
-	int pin = 1 << (gpio & GPIO_PIN_MASK);
-
-	raw_local_irq_save(flags);
 
-	GPIO_M1_RESET(port) = pin; 
-	GPIO_M0_SET(port) = pin;
-
-	raw_local_irq_restore(flags);
-	return 0;
-}
+/* needed for IOCONF register definitions */
+#include <mach/hardware.h>
 
 
-static inline int lpc313x_gpio_get_value(unsigned gpio)
-{
-	return (GPIO_STATE(gpio & GPIO_PORT_MASK) & (1 << (gpio & GPIO_PIN_MASK)));
-}
+/* gpio defines (by group) */
+
+#define BASE_GPIO_GPIO 0
+#define NUM_GPIO_GPIO 15
+#define GPIO_GPIO1  (BASE_GPIO_GPIO + 0)
+#define GPIO_GPIO0  (BASE_GPIO_GPIO + 1)
+#define GPIO_GPIO2  (BASE_GPIO_GPIO + 2)
+#define GPIO_GPIO3  (BASE_GPIO_GPIO + 3)
+#define GPIO_GPIO4  (BASE_GPIO_GPIO + 4)
+#define GPIO_GPIO11 (BASE_GPIO_GPIO + 5)
+#define GPIO_GPIO12 (BASE_GPIO_GPIO + 6)
+#define GPIO_GPIO13 (BASE_GPIO_GPIO + 7)
+#define GPIO_GPIO14 (BASE_GPIO_GPIO + 8)
+#define GPIO_GPIO15 (BASE_GPIO_GPIO + 9)
+#define GPIO_GPIO16 (BASE_GPIO_GPIO + 10)
+#define GPIO_GPIO17 (BASE_GPIO_GPIO + 11)
+#define GPIO_GPIO18 (BASE_GPIO_GPIO + 12)
+#define GPIO_GPIO19 (BASE_GPIO_GPIO + 13)
+#define GPIO_GPIO20 (BASE_GPIO_GPIO + 14)
+
+#define BASE_GPIO_EBI_MCI 15
+#define NUM_GPIO_EBI_MCI 32
+#define GPIO_MGPIO9           (BASE_GPIO_EBI_MCI + 0)
+#define GPIO_MGPIO6           (BASE_GPIO_EBI_MCI + 1)
+#define GPIO_MLCD_DB_7        (BASE_GPIO_EBI_MCI + 2)
+#define GPIO_MLCD_DB_4        (BASE_GPIO_EBI_MCI + 3)
+#define GPIO_MLCD_DB_2        (BASE_GPIO_EBI_MCI + 4)
+#define GPIO_MNAND_RYBN0      (BASE_GPIO_EBI_MCI + 5)
+#define GPIO_MI2STX_CLK0      (BASE_GPIO_EBI_MCI + 6)
+#define GPIO_MI2STX_BCK0      (BASE_GPIO_EBI_MCI + 7)
+#define GPIO_EBI_A_1_CLE      (BASE_GPIO_EBI_MCI + 8)
+#define GPIO_EBI_NCAS_BLOUT   (BASE_GPIO_EBI_MCI + 9)
+#define GPIO_MLCD_DB_0        (BASE_GPIO_EBI_MCI + 10)
+#define GPIO_EBI_DQM_0_NOE    (BASE_GPIO_EBI_MCI + 11)
+#define GPIO_MLCD_CSB         (BASE_GPIO_EBI_MCI + 12)
+#define GPIO_MLCD_DB_1        (BASE_GPIO_EBI_MCI + 13)
+#define GPIO_MLCD_E_RD        (BASE_GPIO_EBI_MCI + 14)
+#define GPIO_MLCD_RS          (BASE_GPIO_EBI_MCI + 15)
+#define GPIO_MLCD_RW_WR       (BASE_GPIO_EBI_MCI + 16)
+#define GPIO_MLCD_DB_3        (BASE_GPIO_EBI_MCI + 17)
+#define GPIO_MLCD_DB_5        (BASE_GPIO_EBI_MCI + 18)
+#define GPIO_MLCD_DB_6        (BASE_GPIO_EBI_MCI + 19)
+#define GPIO_MLCD_DB_8        (BASE_GPIO_EBI_MCI + 20)
+#define GPIO_MLCD_DB_9        (BASE_GPIO_EBI_MCI + 21)
+#define GPIO_MLCD_DB_10       (BASE_GPIO_EBI_MCI + 22)
+#define GPIO_MLCD_DB_11       (BASE_GPIO_EBI_MCI + 23)
+#define GPIO_MLCD_DB_12       (BASE_GPIO_EBI_MCI + 24)
+#define GPIO_MLCD_DB_13       (BASE_GPIO_EBI_MCI + 25)
+#define GPIO_MLCD_DB_14       (BASE_GPIO_EBI_MCI + 26)
+#define GPIO_MLCD_DB_15       (BASE_GPIO_EBI_MCI + 27)
+#define GPIO_MGPIO5           (BASE_GPIO_EBI_MCI + 28)
+#define GPIO_MGPIO7           (BASE_GPIO_EBI_MCI + 29)
+#define GPIO_MGPIO8           (BASE_GPIO_EBI_MCI + 30)
+#define GPIO_MGPIO10          (BASE_GPIO_EBI_MCI + 31)
+
+#define BASE_GPIO_EBI_I2STX_0 47
+#define NUM_GPIO_EBI_I2STX_0 10
+#define GPIO_MNAND_RYBN1      (BASE_GPIO_EBI_I2STX_0 + 0)
+#define GPIO_MNAND_RYBN2      (BASE_GPIO_EBI_I2STX_0 + 1)
+#define GPIO_MNAND_RYBN3      (BASE_GPIO_EBI_I2STX_0 + 2)
+#define GPIO_MUART_CTS_N      (BASE_GPIO_EBI_I2STX_0 + 3)
+#define GPIO_MUART_RTS_N      (BASE_GPIO_EBI_I2STX_0 + 4)
+#define GPIO_MI2STX_DATA0     (BASE_GPIO_EBI_I2STX_0 + 5)
+#define GPIO_MI2STX_WS0       (BASE_GPIO_EBI_I2STX_0 + 6)
+#define GPIO_EBI_NRAS_BLOUT   (BASE_GPIO_EBI_I2STX_0 + 7)
+#define GPIO_EBI_A_0_ALE      (BASE_GPIO_EBI_I2STX_0 + 8)
+#define GPIO_EBI_NWE          (BASE_GPIO_EBI_I2STX_0 + 9)
+
+#define BASE_GPIO_CGU 57
+#define NUM_GPIO_CGU 1
+#define GPIO_CGU_SYSCLK       (BASE_GPIO_CGU + 0)
+
+#define BASE_GPIO_I2SRX_0 58
+#define NUM_GPIO_I2SRX_0 3
+#define GPIO_I2SRX_BCK0     (BASE_GPIO_I2SRX_0 + 0)
+#define GPIO_I2SRX_DATA0    (BASE_GPIO_I2SRX_0 + 1)
+#define GPIO_I2SRX_WS0      (BASE_GPIO_I2SRX_0 + 2)
+
+#define BASE_GPIO_I2SRX_1 61
+#define NUM_GPIO_I2SRX_1 3
+#define GPIO_I2SRX_DATA1    (BASE_GPIO_I2SRX_1 + 0)
+#define GPIO_I2SRX_BCK1     (BASE_GPIO_I2SRX_1 + 1)
+#define GPIO_I2SRX_WS1      (BASE_GPIO_I2SRX_1 + 2)
+
+#define BASE_GPIO_I2STX_1 64
+#define NUM_GPIO_I2STX_1 4
+#define GPIO_I2STX_DATA1      (BASE_GPIO_I2STX_1 + 0)
+#define GPIO_I2STX_BCK1       (BASE_GPIO_I2STX_1 + 1)
+#define GPIO_I2STX_WS1        (BASE_GPIO_I2STX_1 + 2)
+#define GPIO_I2STX_256FS_0    (BASE_GPIO_I2STX_1 + 3)
+
+#define BASE_GPIO_EBI 68
+#define NUM_GPIO_EBI 16
+#define GPIO_EBI_D_9          (BASE_GPIO_EBI + 0)
+#define GPIO_EBI_D_10         (BASE_GPIO_EBI + 1) 
+#define GPIO_EBI_D_11         (BASE_GPIO_EBI + 2)  
+#define GPIO_EBI_D_12         (BASE_GPIO_EBI + 3)
+#define GPIO_EBI_D_13         (BASE_GPIO_EBI + 4)
+#define GPIO_EBI_D_14         (BASE_GPIO_EBI + 5)
+#define GPIO_EBI_D_4          (BASE_GPIO_EBI + 6)
+#define GPIO_EBI_D_0          (BASE_GPIO_EBI + 7)
+#define GPIO_EBI_D_1          (BASE_GPIO_EBI + 8)
+#define GPIO_EBI_D_2          (BASE_GPIO_EBI + 9)
+#define GPIO_EBI_D_3          (BASE_GPIO_EBI + 10)
+#define GPIO_EBI_D_5          (BASE_GPIO_EBI + 11)
+#define GPIO_EBI_D_6          (BASE_GPIO_EBI + 12)
+#define GPIO_EBI_D_7          (BASE_GPIO_EBI + 13)
+#define GPIO_EBI_D_8          (BASE_GPIO_EBI + 14)
+#define GPIO_EBI_D_15         (BASE_GPIO_EBI + 15)
+
+#define BASE_GPIO_I2C1 84
+#define NUM_GPIO_I2C1 2
+#define GPIO_I2C_SDA1         (BASE_GPIO_I2C1 0)
+#define GPIO_I2C_SCL1         (BASE_GPIO_I2C1 1)
+
+#define BASE_GPIO_SPI 86
+#define NUM_GPIO_SPI 5
+#define GPIO_SPI_MISO         (BASE_GPIO_SPI + 0)
+#define GPIO_SPI_MOSI         (BASE_GPIO_SPI + 1)
+#define GPIO_SPI_CS_IN        (BASE_GPIO_SPI + 2)
+#define GPIO_SPI_SCK          (BASE_GPIO_SPI + 3)
+#define GPIO_SPI_CS_OUT0      (BASE_GPIO_SPI + 4)
+
+#define BASE_GPIO_NAND_CTRL 91
+#define NUM_GPIO_NAND_CTRL 4
+#define GPIO_NAND_NCS_3       (BASE_GPIO_NAND_CTRL + 0)
+#define GPIO_NAND_NCS_0       (BASE_GPIO_NAND_CTRL + 1)
+#define GPIO_NAND_NCS_1       (BASE_GPIO_NAND_CTRL + 2)
+#define GPIO_NAND_NCS_2       (BASE_GPIO_NAND_CTRL + 3)
+
+#define BASE_GPIO_PWM 95
+#define NUM_GPIO_PWM 1
+#define GPIO_PWM_DATA         (BASE_GPIO_PWM + 0)
+
+#define BASE_GPIO_UART 96
+#define NUM_GPIO_UART 2
+#define GPIO_UART_RXD         (BASE_GPIO_UART + 0)
+#define GPIO_UART_TXD         (BASE_GPIO_UART + 1)
+
+
+/* gpiolib init function */
+
+extern void lpc313x_gpiolib_init(void);
+
+
+/* gpiolib fastpath and aliases */
+
+#define IOCONF_FAST_GPIO IOCONF_GPIO
+#define NUM_FAST_GPIO NUM_GPIO_GPIO
+
+#include <asm-generic/gpio.h>
+
+/*
+ * The following functions provide "fastpath" access to the
+ * first group of pins, which are all exclusive GPIOs without
+ * device functions.
+ *
+ * Access to these pins will be faster than for other pins
+ * at the cost of proper gpiolib error handling.
+ *
+ * If you must use bit banging, use these pins preferentially.
+ */
 
-static inline void lpc313x_gpio_set_value(unsigned gpio, int value)
+static inline int gpio_get_value(unsigned gpio)
 {
-	unsigned long flags;
-	int port = (gpio & GPIO_PORT_MASK);
-	int pin = 1 << (gpio & GPIO_PIN_MASK);
-
-	raw_local_irq_save(flags);
-
-	GPIO_M1_SET(port) = pin; 
-
-	if(value) {
-		GPIO_M0_SET(port) = pin;
+	if(gpio < NUM_FAST_GPIO) {
+		unsigned bit = (1 << gpio);
+		if(GPIO_STATE(IOCONF_FAST_GPIO) & bit) {
+			return 1;
+		} else {
+			return 0;
+		}
 	} else {
-		GPIO_M0_RESET(port) = pin;
+		return __gpio_get_value(gpio);
 	}
-
-	raw_local_irq_restore(flags);
-}
-
-
-/*-------------------------------------------------------------------------*/
-
-/* Wrappers for "new style" GPIO calls. These calls LPC313x specific versions
- * to allow future extension of GPIO logic.
-*/
-static inline  int gpio_direction_input(unsigned gpio)
-{
-	return lpc313x_gpio_direction_input(gpio);
 }
 
-static inline int gpio_direction_output(unsigned gpio, int value)
+static inline void gpio_set_value(unsigned gpio, int value)
 {
-	lpc313x_gpio_set_value(gpio, value);
-	return 0;
+	if(gpio < NUM_FAST_GPIO) {
+		unsigned bit = (1 << gpio);
+		if(value) {
+			GPIO_M0_SET(IOCONF_FAST_GPIO) = bit;
+		} else {
+			GPIO_M0_RESET(IOCONF_FAST_GPIO) = bit;
+		}
+	} else {
+		__gpio_set_value(gpio, value);
+	}
 }
 
-static inline int gpio_get_value(unsigned gpio)
+static inline int gpio_cansleep(unsigned gpio)
 {
-	return lpc313x_gpio_get_value(gpio);
+	/* gpio_cansleep() is non-trivial on lpc313x */
+	return __gpio_cansleep(gpio);
 }
 
-static inline void gpio_set_value(unsigned gpio, int value)
+static inline int gpio_to_irq(unsigned gpio)
 {
-	lpc313x_gpio_set_value(gpio, value);
+	/* gpio_to_irq() is non-trivial on lpc313x */
+	return __gpio_to_irq(gpio);
 }
-static inline int gpio_request(unsigned gpio, const char *label)
-{
-	return 0;
-}
-/**
- * FIXME: It is assumed that freeing a gpio pin
- * will set it to the default mode. eh?
- **/
-static inline void gpio_free( unsigned gpio)
-{
-	lpc313x_gpio_ip_driven(gpio);
-}
-int gpio_is_valid(unsigned pin);
-
 
 #endif /*_LPC313X_GPIO_H*/
diff --git a/arch/arm/mach-lpc313x/include/mach/irqs.h b/arch/arm/mach-lpc313x/include/mach/irqs.h
index 7d751eb..6c62705 100644
--- a/arch/arm/mach-lpc313x/include/mach/irqs.h
+++ b/arch/arm/mach-lpc313x/include/mach/irqs.h
@@ -143,9 +143,12 @@
 #define BOARD_IRQ_EVENT_MAP	{ \
 	CHIP_IRQ_EVENT_MAP \
 	{IRQ_DM9000_ETH_INT, EVT_mNAND_RYBN3, EVT_ACTIVE_HIGH}, \
-	{IRQ_SDMMC_CD, EVT_mI2STX_BCK0, EVT_ACTIVE_LOW}, \
+  {IRQ_SDMMC_CD, EVT_mNAND_RYBN2, EVT_ACTIVE_LOW}, \
 	{IRQ_EA_VBUS_OVRC, EVT_I2SRX_WS0, EVT_ACTIVE_LOW}, \
 	}
+  //{IRQ_SDMMC_CD, EVT_mI2STX_BCK0, EVT_ACTIVE_LOW}, --hh
+
+
 /* Following defines group the board IRQs into 4 IRQ_EVNTR groups.
    IRQ_EVT_ROUTERx IRQ is generated when event in the corresponding 
    group triggers.
