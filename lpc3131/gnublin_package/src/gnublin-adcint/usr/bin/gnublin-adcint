#!/bin/bash

# Wrapper Script for reading values from the internal lpc3131 AD converter
# Author: Benedikt Niedermayr (niedermayr@embedded-projects.net)
# Version 1.0
# embedded projects GmbH

# This program (including documentation) is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License version 3 (GPLv3; http://www.gnu.org/licenses/gpl-3.0.html ) for more details.


channel="1"
result=""
json_f="0"
brute_f="0"
devfile="/dev/lpc313x_adc"
string='
Module automaticly loaded'
helpstring='This Script prints out the values of a selected internal adc channel 
-h Show this help
-b show raw output
-j Convert output to json format
-c Select gpa<x> Pin (1 is default)
-d Choose Path to device file

Example:

read value of channel 3 and print it in json format:
gnublin-adcint -j -c 3

read value of channel 1 and print it in normal format:
gnublin-adcint -c 1'


check_channel() {

	if [ "$1" -gt "3" ]
	then
		
		if [ "$json_f" == "1" ]
		then
			echo "{ \"error_msg\" : \"channel is not valid \",\"result\" : \"-1\" }"
		else 
		echo "channel is not valid"
		fi
		exit 1
	fi 
}


# check if script was called with parameters
if [ "$#" = "0" ]
then 
		if [ "$json_f" == "1" ]
		then
			echo "{ \"error_msg\" : \"No parameters given. -h for help\",\"result\" : \"-2\" }"
		else
		echo "No parameters given. -h for help"
		fi
   exit 1
fi 


#check if channel_value is an integer
if [ "${channel//[0-9]*}" != "" ] 
then
		if [ "$json_f" == "1" ]
		then
			echo "{ \"error_msg\" : \"Only Integers allowed for channel\",\"result\" : \"-3\" }"
		else
		echo "Only Integers allowed for channel"
		fi
   exit 1
fi



#modul autoload
lsmod | grep "lpc313x_adc"  >/dev/null
if [ "$?" == "1" ]
then
	modprobe lpc313x_adc
	sleep 1
fi 

#parse parameters
while getopts c:d:jhb opt
 do
      case $opt in
          c) channel="${OPTARG}" ;;
          d) devfile="${OPTARG}" ;;
          j) json_f="1" ;;
          b) brute_f="1" ;;
          ?) echo "$helpstring"
             exit 1 ;;
		  h) echo "$helpstring"
             exit 1 ;;
      esac
done


check_channel $channel

#check device-file
if [ ! -c $devfile ]
then
	
		if [ "$json_f" == "1" ]
		then
		echo "{ \"error_msg\" : \"File: $devfile was not found\",\"result\" : \"-4\" }"
		else
		echo "File: $devfile was not found"
		fi
	exit 1
fi


#read the value
echo "$channel" > "$devfile" 
tmp=$(cat "$devfile")
let result="${tmp}" 


#print the result in normal format or in json format
if [ "$json_f" == "1" ]
then
    echo "{ \"voltage\" : \"$result\",\"result\" : \"0\" }"
elif [ "$brute_f" == "1"  ] 
    echo $result
else
    echo $result
fi 



