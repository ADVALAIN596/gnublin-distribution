#!/bin/bash

# Wrapper Script for getting connection to an AP via wlan
# Author: Benedikt Niedermayr (niedermayr@embedded-projects.net)
# Version 1.0
# embedded projects GmbH

# This program (including documentation) is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License version 3 (GPLv3; http://www.gnu.org/licenses/gpl-3.0.html ) for more details.

resolution="640x480"
time="1"
pps="15"
output_dir=""
device=""
port=""
number=""
stream=""
web_output="/var/www"
screenshot="false"
helpstring='This wrapper Script connects your Wlan Module to an Access Point:

gnublin-wlan [-h/-e] [wpa option: -k/-s || -c] [Ip: -t static -i/-g || -t dhcp]

Output:
-h 			Show this help


Quality:
-r 				Resolution of video or screenshot
-p				Pictures per second for streaming option.

Screenshots:
-s <number>		Make <number> screenshots.
-t <time>		Time between two screenshots.
-f				Specify output folder for screenshots. Default is ./screenshots-date.
 	 	
Videos/Stream:
-v [start/stop]	Start/Stop a video stream.
-p				Specify port for Web Stream connection.
-o				Output folder of Webserver for Webstream


Device:
-d				Specify device file. Default is /dev/video0

Examples:
*********

'
source wlan_functions.sh


while getopts r:s:t:f:vp:ed:p: opt
 do
      case $opt in
          r) resolution="${OPTARG}" ;;
          s) number="${OPTARG}" ;;
		  p) pps="${OPTARG}" ;;
		  o) web_output="${OPTARG}" ;;
			 screenshot="true" ;;
		  t) time="${OPTARG}" ;;
          d) device="${OPTARG}" ;;
		  v) stream="start" ;;
		  p) port="${OPTARG}" ;;
          ?) echo "$helpstring"
             exit 1 ;;
		  h) echo "$helpstring"
             exit 1 ;;
      esac
done

if [ -z "$1" ]; then
	echo "$helpstring"
	exit 1
fi


if [ ! -d "/etc/gnublin" ]; then
	mkdir "/etc/gnublin"
else
	if [ ! -d "/etc/gnublin/webcam" ]; then
		mkdir "/etc/gnublin/webcam"
 	fi
fi


if [ "$screenshot" == "true" ]; then


elif [ "$stream" == "start" ]; then

mjpg-streamer -i "/lib/input_uvc.so -d ${device}  -f ${pps}  -r ${resolution}" -o "/lib/output_http.so -p ${port} -w ${web_output} -n" -b

elif [ "$stream" == "stop" ]; then

if [ "$(pidof mjpg-streamer)" != "" ]; then
	kill $(pidof mjpg-streamer)
fi
else

echo "Nothing to do... pleas select an screenshot or video-stream option!"

fi






