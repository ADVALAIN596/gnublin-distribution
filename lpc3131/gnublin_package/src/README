You can also create your own '.deb' package


The following shows the structure of a debian package.

├── dog_app-2.0
│   ├── DEBIAN
│   │   └── control
│   └── usr
│       └── bin
│           ├── dog-app
│           ├── dog-app.c
│           └── dog-example


After installation process this structure will be copied to root. This means that you can find the dog-app at /usr/bin/dog-app after installing the '.deb' package.

You will need also the DEBIAN folder with the control file:

Package: dog-app
Version: 0.0.1-1
Section: misc
Priority: extra
Architecture: armel
Depends:
Installed-Size: 11747
Maintainer: Benedikt Niedermayr <niedermayr@embedded-projects.net>
Homepage:
Description: An anpplication for controlling an line based DOGM Display.


After building the structure you can build your own '.deb' package with:

dpkg -b dog_app-2.0 debianpackagename.deb



#########################
#Using the mkdeb Script:#
#########################
You can also use the implemented Script in this folder for building everything in this folder to a .deb package!

You have just to specify the name of your created folder:

If it starts with NODEB_ , no .deb package will be created of this folder.

Start building your .deb packages with:

./mkdeb_package

The results will be saved in ../deb folder!







